1. 폴더 구조
src/
├── components/
├── pages/
├── hooks/
├── utils/
├── assets/
├── styles/
└── App.js

2. 라우팅 규칙

URL 경로 작성 규칙
- 소문자만 사용
- 단어 구분은 (-) 사용
- 페이지의 목적과 기능 단위로 명확하게 작성
- 동적 라우팅은 :id 형태로 작성

3. 네이밍

- 📁  폴더 / 파일
- 폴더명 : 모두 소문자 (pages, components, hooks)
- 파일명 : PascalCase (Home , Service , …)

- 📄 컴포넌트
- PascalCase
ex) LoginPage.jsx 안에는 function LoginPage( )

- 🧠 변수 / 함수
- camelCase
ex) 상태 변수 : isLoading , userName , formData
ex) 이벤트 함수 : handleClick , submitForm

[PR규칙]
1. PR 제목 
- [FEAT] : 회원가입, 로그인, 메인화면 UI 구현

2. PR 요약
- 회원가입 화면, 로그인 화면, 메인 화면 UI 구현 완료

3. 작업 상세 내용
- 소셜 로그인 버튼 (Naver, Kakao, Google) UI 추가

4. 관련 이슈
- closes #N

- [Commit Convention]

CHORE: 코드 수정, 내부 파일 수정
FEAT: 새로운 기능 추가
FIX: 버그, 오류 수정
DOCS: README 등의 문서 수정
REFACTOR: 기능 변경 없이 구조 개선
TEST: 테스트 코드 추가 및 수정

🪴 Branch Convention (GitHub Flow)
main: 배포 가능한 브랜치, 항상 배포 가능한 상태를 유지
feature/{description}: 새로운 기능을 개발하는 브랜치
예: feature/add-login-page

🌊Flow
feature 브랜치에서 새로운 브랜치를 생성.
작업을 완료하고 커밋 메시지에 맞게 커밋.
Pull Request를 생성 / 팀원들의 리뷰.
리뷰가 완료되면 develop 브랜치로 병합.

main 브랜치로 병합 후, 배포. 예시:
# 새로운 기능 개발
git checkout -b feature/add-login-page
# 작업 완료 후, develop 브랜치로 병합
git checkout develop
git pull origin develop   # 최신 develop 브랜치를 로컬로 가져오기
git merge feature/add-login-page   # feature 브랜치를 develop 브랜치에 병합
git push origin develop 